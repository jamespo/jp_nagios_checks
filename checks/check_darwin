#!/usr/bin/env python
# -*- coding:utf-8 -*-

# check_darwin - nagios check for National Rail
#
# (c) James Powell / jamespo [at] gmail /  2017
#
# requires nre-darwin-py
# & a configparser format config file in /etc/check_darwin with
# one section Main with keys wsdl and api_key

from nredarwin.webservice import DarwinLdbSession
from optparse import OptionParser
import os
import ConfigParser

def nag_code_to_status(code, msg):
    '''return display nagios status for code with msg appended'''
    code2stat = { 0 : 'OK',
                  1 : 'WARNING',
                  2 : 'CRITICAL',
                  3 : 'UNKNOWN'
    }
    return '%s: %s' % (code2stat[code], msg)


def readconf():
    '''read config file'''
    config = ConfigParser.ConfigParser()
    config.read(['/etc/check_darwin', os.path.expanduser('~/.config/.check_darwin')])
    return (config.get('Main', 'api_key'), config.get('Main', 'wsdl'))

def create_session(api_key, wsdl):
    print api_key, wsdl
    return DarwinLdbSession(wsdl=wsdl, api_key=api_key)


def find_delays(darwin_sess, from_stn, to_stn, min_trains):
    board = darwin_sess.get_station_board(from_stn)
    print board.location_name
    #print board
        # if 'There are no direct services' in statushtml:
        #     return (1, 'No trains found')
        # # TODO: other non-results checks
        # else:
        #     departures = darwin_util.parse_page(statushtml)
        #     num_trains = len(departures)
        #     num_ontime = len([train[1] for train in departures if train[1] == 'On Time'])
        #     if num_trains < min_trains:
        #         return (2, 'Only %s trains found (%s required)' % (num_trains, min_trains))
        #     elif num_trains == num_ontime:
        #         return (0, 'No delays (%s trains found)' % num_trains)
        #     else:
        #         return (2, '%s/%s trains delayed' % (num_trains - num_ontime, num_trains))


def get_cli_options():
    parser = OptionParser()
    parser.add_option("-f", "--from", help="Departure Station Code (from)",
                      dest="from_stn", default=None)
    parser.add_option("-t", "--to", help="Destination Station Code (to)",
                      dest="to_stn", default=None)
    parser.add_option("-m", "--mintrains", help="Minimum # of trains",
                      dest="min_trains", default="3")
    (options, args) = parser.parse_args()
    if options.from_stn is None or options.to_stn is None:
        return (None, None)
    else:
        return (options.from_stn, options.to_stn, int(options.min_trains))


# start of main program
def main():
    from_stn, to_stn, min_trains = get_cli_options()
    api_key, wsdl = readconf()
    sess = create_session(api_key, wsdl)
    (status, statstr) = find_delays(sess, from_stn, to_stn, min_trains)
    print statstr
    exit(status)


if __name__ == "__main__":
    main()
