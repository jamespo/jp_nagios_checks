#!/usr/bin/env python

# check_last_lines ; -*-Python-*-
# a simple nagios check to check last lines of a file for a match
# Copyright James Powell 2015 / jamespo [at] gmail [dot] com
# This program is distributed under the terms of the GNU General Public License v3

import sys, re, os
from optparse import OptionParser

# from http://stackoverflow.com/questions/136168/get-last-n-lines-of-a-file-with-python-similar-to-tail
def tail( f, lines=20 ):
    total_lines_wanted = lines
    BLOCK_SIZE = 1024
    f.seek(0, 2)
    block_end_byte = f.tell()
    lines_to_go = total_lines_wanted
    block_number = -1
    blocks = [] # blocks of size BLOCK_SIZE, in reverse order starting
                # from the end of the file
    while lines_to_go > 0 and block_end_byte > 0:
        if (block_end_byte - BLOCK_SIZE > 0):
            # read the last block we haven't yet read
            f.seek(block_number*BLOCK_SIZE, 2)
            blocks.append(f.read(BLOCK_SIZE))
        else:
            # file too small, start from begining
            f.seek(0,0)
            # only read what was not read
            blocks.append(f.read(block_end_byte))
        lines_found = blocks[-1].count('\n')
        lines_to_go -= lines_found
        block_end_byte -= BLOCK_SIZE
        block_number -= 1
    all_read_text = ''.join(reversed(blocks))
    return (all_read_text.splitlines()[-total_lines_wanted:])

def checkfile(filename, numlines, matchregex):
    with open(filename) as f:
        lastlines = tail(f)
    for line in lastlines:
        if re.match(matchregex, line):
            return (0, line)
    return (1, None)

def main():
    parser = OptionParser()
    parser.add_option("-f", "--file", dest="filename")
    parser.add_option("-n", "--numlines", dest="numlines", default="20")
    parser.add_option("-m", "--matchregex", dest="matchregex", help="regex to match running service status")
    (options, args) = parser.parse_args()
    (rc, match) = checkfile(options.filename, int(options.numlines), options.matchregex)
    
    if rc == 0:
        rcstr = "OK: '%s' matched in '%s'" % (options.matchregex, match)
    else:
        rcstr = "CRITICAL: No match found for '%s'" % options.matchregex
    print rcstr
    sys.exit(rc)

if __name__ == '__main__':
    main()

