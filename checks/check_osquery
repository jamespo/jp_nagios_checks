#!/usr/bin/env python

# check_osquery - nagios checks using osquery
# (c) jamespo [at] gmail [dot] com / 2016 - use as you see fit
# USAGE: check_osquery -q 'select count(username) as ct from users' -c 'ct>100' -w 'ct>50'

from __future__ import print_function
import osquery, re, operator, sys
from optparse import OptionParser

def create_test_function(testline):
    '''return function to test query results against threshold'''
    ops = { "=" : operator.eq,
            ">" : operator.gt,
            "<" : operator.lt,
            "!=" : operator.ne,
            "contains" : operator.contains }
    pt = re.match(r'(.+) *(=|!=|>|<|contains) *(.+)$', testline)
    (field, cmp_function, cmp_value) = (pt.group(1), pt.group(2), pt.group(3))
    if pt:
        # return lambda with specified operator & threshold that takes results dict
        if re.match(r'\d+$', cmp_value):
            # cast to int if cmp_value is int
            return lambda(query_results): ops[cmp_function](int(query_results[field]), \
                                                            int(cmp_value))
        else:
            return lambda(query_results): ops[cmp_function](query_results[field], \
                                                            cmp_value)
    else:
        return None

def check_opts():
    '''parse command line options'''
    parser = OptionParser()
    parser.add_option("-q", dest="query", help="osquery query")
    parser.add_option("-c", dest="critical", help="critical check")
    parser.add_option("-w", dest="warning", help="warning check")
    (options, args) = parser.parse_args()
    options.critfunc = (create_test_function(options.critical), 1, 'CRITICAL')
    options.warnfunc = (create_test_function(options.warning), 3, 'WARNING')
    return options

def run_osquery(query):
    '''run a query against osquery'''
    # Spawn an osquery process using an ephemeral extension socket.
    instance = osquery.SpawnInstance()
    instance.open()
    # Issues queries and call osquery Thrift APIs.
    return instance.client.query(query)

def main():
    options = check_opts()
    query_res = run_osquery(options.query)
    if query_res.status.code != 0:
        # query failed
        return (2, 'UNKNOWN: osquery failed')
    # run checks against query results
    for check in (options.critfunc, options.warnfunc):
        # TODO: only uses first row of response at present
        if check[0](query_res.response[0]):
            # check succeeds
            return (check[1], '%s: %s returned' % (check[2], str(query_res.response[0])))
    # no checks succeed, return OK
    return (0, 'OK: %s returned' % (str(query_res.response[0])))
        
if __name__ == "__main__":
    (rc, rcstr) = main()
    print(rcstr)
    sys.exit(rc)
